
initialize() {
	
	if (exists("slimgui")){
		// need to define the following Eidos constants
		defineConstant("pref", "testinf2");
	}
	defineConstant("N_B", 30281);
	defineConstant("N_C", 10100);
	defineConstant("tau_BC", 845);
	defineConstant("mig_B2C", 0.0002148);
	
	params = readFile(paste0(pref, "_init.param"));
	defineConstant("simlen", asInteger(params[0]));
	defineConstant("selcoef", asFloat(params[1])); // scaled s
	defineConstant("last", asInteger(params[2])); // equivalent to scaled mutgen
	cat(c("F_(C, B, tot):", params[c(3, 4, 5)], "\n"));
	
	//defineGlobal("AF_traj", float(last)); // vector storing AF trajectory
	defineGlobal("reset_attempt", 0);
	
	initializeTreeSeq();
	initializeMutationRate(0); // use tree-seq recording
	
	initializeMutationType("m0", 0.5, "f", 0.0); // use "m0" for beneficial, initially neutral
	initializeMutationType("m1", 0.5, "f", 0.0);
	
	// g1 genomic element type: uses m1 for all mutations
	initializeGenomicElementType("g1", m1, 1.0);
	
	// uniform chromosome of length 100 kb with uniform recombination
	initializeGenomicElement(g1, 0, simlen-1);
	initializeRecombinationRate(1e-8);
}

1 late() {
	defineConstant("simID", getSeed());
	sim.readFromPopulationFile(paste0(pref, "_init.trees"));
	mut = sim.mutationsOfType(m0);
	mut.setSelectionCoeff(selcoef); // Convert to beneficial

	if (last < tau_BC){
		p1.setMigrationRates(c(p0), c(mig_B2C));
		//p0.setMigrationRates(c(p1), c(0.0001));
		
		drift_freq = sim.mutationFrequencies(p1, mut);		
		sim.deregisterScriptBlock(s4);
		
	} else {
		drift_freq = sim.mutationFrequencies(p0, mut);
		
		sim.rescheduleScriptBlock(s4, last-tau_BC, last-tau_BC);
		sim.rescheduleScriptBlock(s5, last-tau_BC, last);
		//sim.rescheduleScriptBlock(s2, last-tau_BC+1, last);
	}
	
	defineGlobal("Finit", drift_freq);
	defineGlobal("driftgen", mut.originGeneration);
	cat(c("F_init:", Finit, "; drift_gen:", driftgen, "\n"));
	cat(c("F_(B, tot):",
		sim.mutationFrequencies(p0, mut),
		sim.mutationFrequencies(NULL, mut),
		"\n")); // debug
	sim.rescheduleScriptBlock(s2, 2, last);
	sim.rescheduleScriptBlock(s3, last, last);
}

s5 fitness(m0, p0) { return 1.0; } // mutation has no effect in p0 population

s4 4 late() {
	sim.addSubpopSplit("p1", N_C, p0);	
	p0.setSubpopulationSize(N_B);
	p1.setMigrationRates(c(p0), c(mig_B2C));
}

s2 2 late() {
	if (sim.countOfMutationsOfType(m0) == 0){
		fixed = (sum(sim.substitutions.mutationType == m0) == 1);
		if (fixed){
			cat(simID + ": FIXED - RESTARTING\n");
		} else {
			cat(simID + ": LOST - RESTARTING\n");
		}
		
		if (reset_attempt == 500){ // maximum number of resets
			cat(simID + ": MAX ATTEMPT REACHED - ABORTING\n");
			cat(c("%%", -1, -1, -1, -1, -1, -1, "\n"), sep='\t');
			//deleteFile("/tmp/slim_" + simID + ".trees");
			sim.simulationFinished();
		}
		
		sim.readFromPopulationFile(paste0(pref, "_init.trees"));
		// start a newly seeded run
		setSeed(rdunif(1, 0, asInteger(2^32) - 1));
		if (last < tau_BC){
			p1.setMigrationRates(c(p0), c(mig_B2C));
		}
		mut = sim.mutationsOfType(m0);
		mut.setSelectionCoeff(selcoef);
		
		defineGlobal("reset_attempt", reset_attempt+1);
	}
//	else{
//		AF_traj[sim.generation-1] = sim.mutationFrequencies(p1, sim.mutationsOfType(m2));
//	}
}

s3 3 late() {
	mut_freq = sim.mutationFrequencies(p1, sim.mutationsOfType(m0));
	
	if (mut_freq < 0.2 | mut_freq > 0.95){ // << AF bounds
		cat(simID + ": FREQ OOB - RESTARTING\n");
		if (reset_attempt == 500){ // maximum number of resets
			cat(simID + ": MAX ATTEMPT REACHED - ABORTING\n");
			cat(c("%%", -1, -1, -1, -1, -1, -1, "\n"), sep='\t');
			//deleteFile("/tmp/slim_" + simID + ".trees");
			sim.simulationFinished();
		}
		
		sim.readFromPopulationFile(paste0(pref, "_init.trees"));
		// start a newly seeded run
		setSeed(rdunif(1, 0, asInteger(2^32) - 1));
		if (last < tau_BC){
			p1.setMigrationRates(c(p0), c(mig_B2C));
		}

		mut = sim.mutationsOfType(m0);
		mut.setSelectionCoeff(selcoef);
		defineGlobal("reset_attempt", reset_attempt+1);
		return;
	}
	
	sim.treeSeqOutput(paste0(c(pref, "_slim.trees")));
	cat(c("%%", selcoef, driftgen, last, Finit, mut_freq, pref, "\n"), sep='\t'); // make sure the treeseq file is saved before printing meta-data
	//writeFile(paste0(c(pref, ".af")), paste(AF_traj, sep='\n'));
	//deleteFile("/tmp/slim_" + simID + ".trees");
	sim.simulationFinished();
}