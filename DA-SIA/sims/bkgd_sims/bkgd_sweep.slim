
initialize() {

	if (exists("slimgui")){
		defineConstant("N", 10000);  // pop size

		defineConstant("L", 1e5);    // total chromosome length
		defineConstant("G", 1e4);   // gene length
		defineConstant("rho", 1.25e-8);
		defineConstant("mu", 1.25e-8);
		
		defineConstant("s_min", 2e-3);
		defineConstant("s_max", 1e-2);
		
//		defineConstant("mutgenbp_early", 10000);
//		defineConstant("mutgenbp_late", 100);
		defineConstant("min_AF", 0.05);
		defineConstant("max_AF", 0.95);
		defineConstant("max_reset", 500);
		
		defineConstant("outPref", "test2");
	}
	
	defineConstant("s", runif(1, s_min, s_max));
	k = 0.9;
	b1 = 0.85;
	b2 = 1.45;
	mutgenbp_late = 10^b1*s^(-k);
	mutgenbp_early = 10^b2*s^(-k);
	defineConstant("mutgenbp", rdunif(1, asInteger(mutgenbp_late), asInteger(mutgenbp_early)));
	defineConstant("last", 4*N);  // end gen
	
	defineGlobal("reset_attempt", 0);
	
	initializeTreeSeq();
	initializeMutationRate(mu);
	initializeRecombinationRate(rho, L-1);
	initializeMutationType("m1", 0.5, "f", s);
	initializeMutationType("m2", 0.25, "g", -0.03, 0.2);
	initializeGenomicElementType("g2", m2, 1.0);
	initializeGenomicElement(g2, asInteger(L/2-G/2), asInteger(L/2+G/2));
}
1 {
	defineConstant("simID", getSeed());
	sim.addSubpop("p1", N);
	
	sim.rescheduleScriptBlock(s1, last-mutgenbp-100, last-mutgenbp-100);
	sim.rescheduleScriptBlock(s2, last-mutgenbp, last-mutgenbp);
	sim.rescheduleScriptBlock(s3, last, last);
}

s1 2 late() {
	//sim.outputFull("/tmp/slim_" + simID + ".txt"); // modify this b4 deployment
	sim.treeSeqOutput("tmp/slim_" + simID + ".trees");
}

s2 3 late() {
	target = sample(p1.genomes, 1);
	target.addNewDrawnMutation(m1, asInteger(L/2));
}

1: late() {
	if (sim.generation > last-mutgenbp & sim.countOfMutationsOfType(m1) == 0){
		fixed = (sum(sim.substitutions.mutationType == m1) == 1);

		if (fixed){
			cat(simID + ": FIXED - RESTARTING\n");
		} else {
			cat(simID + ": LOST - RESTARTING\n");
		}
		
		if (reset_attempt == max_reset){
			cat(simID + ": MAX ATTEMPT REACHED - ABORTING\n");
			cat(c("%%", -1, -1, -1, -1, "\n"), sep='\t');
			deleteFile("tmp/slim_" + simID + ".trees");
			sim.simulationFinished();
			return;
		}
			
		// go back to generation `mutgen-100`
		//sim.readFromPopulationFile("/tmp/slim_" + simID + ".txt");
		sim.readFromPopulationFile("tmp/slim_" + simID + ".trees");
		
		// start a newly seeded run
		setSeed(rdunif(1, 0, asInteger(2^32) - 1));
		defineGlobal("reset_attempt", reset_attempt+1);
	}
}

s3 4 late() {
	if (sim.countOfMutationsOfType(m1) == 0){
		mut_freq = -1; // either fixed or lost
	} else{
		mut_freq = sim.mutationFrequencies(NULL, sim.mutationsOfType(m1));
	}

	if (mut_freq < min_AF | mut_freq > max_AF){
		cat(simID + ": FREQ OOB - RESTARTING\n");
		if (reset_attempt == max_reset){
			cat(simID + ": MAX ATTEMPT REACHED - ABORTING\n");
			cat(c("%%", -1, -1, -1, -1, "\n"), sep='\t');
			deleteFile("tmp/slim_" + simID + ".trees");
			sim.simulationFinished();
			return;
		}
			
		// go back to generation `mutgen-100`
		//sim.readFromPopulationFile("/tmp/slim_" + simID + ".txt");
		sim.readFromPopulationFile("tmp/slim_" + simID + ".trees");
		
		// start a newly seeded run
		setSeed(rdunif(1, 0, asInteger(2^32) - 1));
		defineGlobal("reset_attempt", reset_attempt+1);
		return;
	}
	
	sim.treeSeqOutput(paste(c(outPref, ".trees"), sep=""));
	cat(c("%%", s, mutgenbp, mut_freq, outPref, "\n"), sep="\t");
	//deleteFile("/tmp/slim_" + simID + ".txt");
	deleteFile("tmp/slim_" + simID + ".trees");
	sim.simulationFinished();
}
