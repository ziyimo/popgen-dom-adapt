// soft sweep sims

initialize() {
	
	if (exists("slimgui")){
		// need to define the following Eidos constants
		
		defineConstant("pref", "neu_test");
	
	}
	
	defineConstant("G", 1e4);   // gene length
	defineConstant("rho", 1e-7);
	defineConstant("mu", 1.25e-7); // only for deleterious mutations
	
	params = readFile(paste0(pref, "_init.param"));
	defineConstant("simlen", asInteger(params[0]));
	defineConstant("selcoef", asFloat(params[1])); // scaled s
	defineConstant("last", asInteger(params[2])); // equivalent to scaled mutgen
	cat(c("AF_init:", params[3], "\n"));
	defineConstant("Tstart", asInteger(params[4]));
	defineConstant("Tend", asInteger(params[5]));
	defineConstant("Nbotlnk", asInteger(params[6]));
	
	//defineGlobal("AF_traj", float(last)); // vector storing AF trajectory
	//defineGlobal("reset_attempt", 0);
	
	initializeTreeSeq();
	initializeMutationRate(mu); // use tree-seq recording
	initializeRecombinationRate(rho, simlen-1);
	
	initializeMutationType("m0", 0.5, "f", 0.0); // use "m0" for beneficial, initially neutral
	initializeMutationType("m1", 0.25, "g", -0.03, 0.2);
	
	// g1 genomic element type: uses m1 for all mutations
	initializeGenomicElementType("g1", m1, 1.0);
	
	initializeGenomicElement(g1, asInteger(simlen/2-G/2), asInteger(simlen/2-5));
	initializeGenomicElement(g1, asInteger(simlen/2+5), asInteger(simlen/2+G/2));

}

1 early() {
	defineConstant("simID", getSeed());
	
	// community.rescheduleScriptBlock(s3, 2, last);
	community.rescheduleScriptBlock(s4, last, last);
	
	if (last < Tend){
		community.deregisterScriptBlock(s1);
		community.deregisterScriptBlock(s2);
	} else{
		community.rescheduleScriptBlock(s2, last-Tend, last-Tend);
		if (last > Tstart){
			community.rescheduleScriptBlock(s1, last-Tstart, last-Tstart);
		} else{
			community.deregisterScriptBlock(s1);
		}
	}
}

1 late() {
	
	sim.readFromPopulationFile(paste0(pref, "_init.trees"));

}

s1 2 early() {
	p0.setSubpopulationSize(Nbotlnk);
}

s2 3 early() {
	p0.setSubpopulationSize(10000);
}

s4 5 late() {
	sim.treeSeqOutput(paste0(c(pref, "_slim.trees")));
	cat(c("%%", selcoef, -1, last, -1, -1, pref, "\n"), sep='\t'); // make sure the treeseq file is saved before printing meta-data
	//writeFile(paste0(c(pref, ".af")), paste(AF_traj, sep='\n'));
	//deleteFile("/tmp/slim_" + simID + ".trees");
	sim.simulationFinished();
}